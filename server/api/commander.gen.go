// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error   *string `json:"error,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Member defines model for Member.
type Member struct {
	Assigned  *bool   `json:"assigned,omitempty"`
	Connected *bool   `json:"connected,omitempty"`
	Id        *string `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
	Rank      *string `json:"rank,omitempty"`
	ShipId    *string `json:"ship_id,omitempty"`
	SquadId   *string `json:"squad_id,omitempty"`
	StandBy   *bool   `json:"stand_by,omitempty"`
}

// Operation defines model for Operation.
type Operation struct {
	Id      *string   `json:"id,omitempty"`
	Members *[]Member `json:"members,omitempty"`
	Name    *string   `json:"name,omitempty"`
}

// Position defines model for Position.
type Position struct {
	Id     *string `json:"id,omitempty"`
	Member *Member `json:"member,omitempty"`
	Name   *string `json:"name,omitempty"`
}

// Ship defines model for Ship.
type Ship struct {
	Crew      *int      `json:"crew,omitempty"`
	Id        *string   `json:"id,omitempty"`
	Name      *string   `json:"name,omitempty"`
	Positions *[]Member `json:"positions,omitempty"`
	Scu       *int      `json:"scu,omitempty"`
}

// Squad defines model for Squad.
type Squad struct {
	Id      *string   `json:"id,omitempty"`
	Members *[]Member `json:"members,omitempty"`
	Name    *string   `json:"name,omitempty"`
}

// GetApiV1LoginParams defines parameters for GetApiV1Login.
type GetApiV1LoginParams struct {
	// Code The login code.
	Code string `form:"code" json:"code"`
}

// PutApiV1OperationsOperationIdJSONRequestBody defines body for PutApiV1OperationsOperationId for application/json ContentType.
type PutApiV1OperationsOperationIdJSONRequestBody = Operation

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiV1Auth request
	GetApiV1Auth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Login request
	GetApiV1Login(ctx context.Context, params *GetApiV1LoginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Members request
	GetApiV1Members(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1MembersMemberId request
	GetApiV1MembersMemberId(ctx context.Context, memberId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Operations request
	GetApiV1Operations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiV1Operations request
	PostApiV1Operations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1OperationsOperationId request
	GetApiV1OperationsOperationId(ctx context.Context, operationId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiV1OperationsOperationIdWithBody request with any body
	PutApiV1OperationsOperationIdWithBody(ctx context.Context, operationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiV1OperationsOperationId(ctx context.Context, operationId string, body PutApiV1OperationsOperationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiV1Ships request
	GetApiV1Ships(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWs request
	GetWs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiV1Auth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1AuthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Login(ctx context.Context, params *GetApiV1LoginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1LoginRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Members(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1MembersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1MembersMemberId(ctx context.Context, memberId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1MembersMemberIdRequest(c.Server, memberId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Operations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1OperationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiV1Operations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiV1OperationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1OperationsOperationId(ctx context.Context, operationId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1OperationsOperationIdRequest(c.Server, operationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1OperationsOperationIdWithBody(ctx context.Context, operationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1OperationsOperationIdRequestWithBody(c.Server, operationId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiV1OperationsOperationId(ctx context.Context, operationId string, body PutApiV1OperationsOperationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiV1OperationsOperationIdRequest(c.Server, operationId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiV1Ships(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiV1ShipsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiV1AuthRequest generates requests for GetApiV1Auth
func NewGetApiV1AuthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1LoginRequest generates requests for GetApiV1Login
func NewGetApiV1LoginRequest(server string, params *GetApiV1LoginParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, params.Code); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1MembersRequest generates requests for GetApiV1Members
func NewGetApiV1MembersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/members")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1MembersMemberIdRequest generates requests for GetApiV1MembersMemberId
func NewGetApiV1MembersMemberIdRequest(server string, memberId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "member_id", runtime.ParamLocationPath, memberId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/members/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1OperationsRequest generates requests for GetApiV1Operations
func NewGetApiV1OperationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/operations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiV1OperationsRequest generates requests for PostApiV1Operations
func NewPostApiV1OperationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/operations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiV1OperationsOperationIdRequest generates requests for GetApiV1OperationsOperationId
func NewGetApiV1OperationsOperationIdRequest(server string, operationId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "operation_id", runtime.ParamLocationPath, operationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/operations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiV1OperationsOperationIdRequest calls the generic PutApiV1OperationsOperationId builder with application/json body
func NewPutApiV1OperationsOperationIdRequest(server string, operationId string, body PutApiV1OperationsOperationIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiV1OperationsOperationIdRequestWithBody(server, operationId, "application/json", bodyReader)
}

// NewPutApiV1OperationsOperationIdRequestWithBody generates requests for PutApiV1OperationsOperationId with any type of body
func NewPutApiV1OperationsOperationIdRequestWithBody(server string, operationId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "operation_id", runtime.ParamLocationPath, operationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/operations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiV1ShipsRequest generates requests for GetApiV1Ships
func NewGetApiV1ShipsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/ships")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWsRequest generates requests for GetWs
func NewGetWsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiV1AuthWithResponse request
	GetApiV1AuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AuthResponse, error)

	// GetApiV1LoginWithResponse request
	GetApiV1LoginWithResponse(ctx context.Context, params *GetApiV1LoginParams, reqEditors ...RequestEditorFn) (*GetApiV1LoginResponse, error)

	// GetApiV1MembersWithResponse request
	GetApiV1MembersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1MembersResponse, error)

	// GetApiV1MembersMemberIdWithResponse request
	GetApiV1MembersMemberIdWithResponse(ctx context.Context, memberId string, reqEditors ...RequestEditorFn) (*GetApiV1MembersMemberIdResponse, error)

	// GetApiV1OperationsWithResponse request
	GetApiV1OperationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1OperationsResponse, error)

	// PostApiV1OperationsWithResponse request
	PostApiV1OperationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1OperationsResponse, error)

	// GetApiV1OperationsOperationIdWithResponse request
	GetApiV1OperationsOperationIdWithResponse(ctx context.Context, operationId string, reqEditors ...RequestEditorFn) (*GetApiV1OperationsOperationIdResponse, error)

	// PutApiV1OperationsOperationIdWithBodyWithResponse request with any body
	PutApiV1OperationsOperationIdWithBodyWithResponse(ctx context.Context, operationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1OperationsOperationIdResponse, error)

	PutApiV1OperationsOperationIdWithResponse(ctx context.Context, operationId string, body PutApiV1OperationsOperationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1OperationsOperationIdResponse, error)

	// GetApiV1ShipsWithResponse request
	GetApiV1ShipsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ShipsResponse, error)

	// GetWsWithResponse request
	GetWsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWsResponse, error)
}

type GetApiV1AuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Status *string `json:"status,omitempty"`
	}
	JSON401 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1AuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1AuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Token *string `json:"token,omitempty"`
	}
	JSON400 *ErrorResponse
	JSON401 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1MembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Member
}

// Status returns HTTPResponse.Status
func (r GetApiV1MembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1MembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1MembersMemberIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Member
}

// Status returns HTTPResponse.Status
func (r GetApiV1MembersMemberIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1MembersMemberIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1OperationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Operation
}

// Status returns HTTPResponse.Status
func (r GetApiV1OperationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1OperationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiV1OperationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id      *string   `json:"id,omitempty"`
		Members *[]Member `json:"members,omitempty"`
		Name    *string   `json:"name,omitempty"`
	}
	JSON400 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostApiV1OperationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiV1OperationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1OperationsOperationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Operation
	JSON404      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiV1OperationsOperationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1OperationsOperationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiV1OperationsOperationIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Id      *string   `json:"id,omitempty"`
		Members *[]Member `json:"members,omitempty"`
		Name    *string   `json:"name,omitempty"`
	}
	JSON400 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutApiV1OperationsOperationIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiV1OperationsOperationIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiV1ShipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Ship
}

// Status returns HTTPResponse.Status
func (r GetApiV1ShipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiV1ShipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetWsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiV1AuthWithResponse request returning *GetApiV1AuthResponse
func (c *ClientWithResponses) GetApiV1AuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1AuthResponse, error) {
	rsp, err := c.GetApiV1Auth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1AuthResponse(rsp)
}

// GetApiV1LoginWithResponse request returning *GetApiV1LoginResponse
func (c *ClientWithResponses) GetApiV1LoginWithResponse(ctx context.Context, params *GetApiV1LoginParams, reqEditors ...RequestEditorFn) (*GetApiV1LoginResponse, error) {
	rsp, err := c.GetApiV1Login(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1LoginResponse(rsp)
}

// GetApiV1MembersWithResponse request returning *GetApiV1MembersResponse
func (c *ClientWithResponses) GetApiV1MembersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1MembersResponse, error) {
	rsp, err := c.GetApiV1Members(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1MembersResponse(rsp)
}

// GetApiV1MembersMemberIdWithResponse request returning *GetApiV1MembersMemberIdResponse
func (c *ClientWithResponses) GetApiV1MembersMemberIdWithResponse(ctx context.Context, memberId string, reqEditors ...RequestEditorFn) (*GetApiV1MembersMemberIdResponse, error) {
	rsp, err := c.GetApiV1MembersMemberId(ctx, memberId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1MembersMemberIdResponse(rsp)
}

// GetApiV1OperationsWithResponse request returning *GetApiV1OperationsResponse
func (c *ClientWithResponses) GetApiV1OperationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1OperationsResponse, error) {
	rsp, err := c.GetApiV1Operations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1OperationsResponse(rsp)
}

// PostApiV1OperationsWithResponse request returning *PostApiV1OperationsResponse
func (c *ClientWithResponses) PostApiV1OperationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiV1OperationsResponse, error) {
	rsp, err := c.PostApiV1Operations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiV1OperationsResponse(rsp)
}

// GetApiV1OperationsOperationIdWithResponse request returning *GetApiV1OperationsOperationIdResponse
func (c *ClientWithResponses) GetApiV1OperationsOperationIdWithResponse(ctx context.Context, operationId string, reqEditors ...RequestEditorFn) (*GetApiV1OperationsOperationIdResponse, error) {
	rsp, err := c.GetApiV1OperationsOperationId(ctx, operationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1OperationsOperationIdResponse(rsp)
}

// PutApiV1OperationsOperationIdWithBodyWithResponse request with arbitrary body returning *PutApiV1OperationsOperationIdResponse
func (c *ClientWithResponses) PutApiV1OperationsOperationIdWithBodyWithResponse(ctx context.Context, operationId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiV1OperationsOperationIdResponse, error) {
	rsp, err := c.PutApiV1OperationsOperationIdWithBody(ctx, operationId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1OperationsOperationIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiV1OperationsOperationIdWithResponse(ctx context.Context, operationId string, body PutApiV1OperationsOperationIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiV1OperationsOperationIdResponse, error) {
	rsp, err := c.PutApiV1OperationsOperationId(ctx, operationId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiV1OperationsOperationIdResponse(rsp)
}

// GetApiV1ShipsWithResponse request returning *GetApiV1ShipsResponse
func (c *ClientWithResponses) GetApiV1ShipsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiV1ShipsResponse, error) {
	rsp, err := c.GetApiV1Ships(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiV1ShipsResponse(rsp)
}

// GetWsWithResponse request returning *GetWsResponse
func (c *ClientWithResponses) GetWsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWsResponse, error) {
	rsp, err := c.GetWs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWsResponse(rsp)
}

// ParseGetApiV1AuthResponse parses an HTTP response from a GetApiV1AuthWithResponse call
func ParseGetApiV1AuthResponse(rsp *http.Response) (*GetApiV1AuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1AuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Status *string `json:"status,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetApiV1LoginResponse parses an HTTP response from a GetApiV1LoginWithResponse call
func ParseGetApiV1LoginResponse(rsp *http.Response) (*GetApiV1LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Token *string `json:"token,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetApiV1MembersResponse parses an HTTP response from a GetApiV1MembersWithResponse call
func ParseGetApiV1MembersResponse(rsp *http.Response) (*GetApiV1MembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1MembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Member
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1MembersMemberIdResponse parses an HTTP response from a GetApiV1MembersMemberIdWithResponse call
func ParseGetApiV1MembersMemberIdResponse(rsp *http.Response) (*GetApiV1MembersMemberIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1MembersMemberIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Member
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetApiV1OperationsResponse parses an HTTP response from a GetApiV1OperationsWithResponse call
func ParseGetApiV1OperationsResponse(rsp *http.Response) (*GetApiV1OperationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1OperationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Operation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiV1OperationsResponse parses an HTTP response from a PostApiV1OperationsWithResponse call
func ParsePostApiV1OperationsResponse(rsp *http.Response) (*PostApiV1OperationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiV1OperationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id      *string   `json:"id,omitempty"`
			Members *[]Member `json:"members,omitempty"`
			Name    *string   `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetApiV1OperationsOperationIdResponse parses an HTTP response from a GetApiV1OperationsOperationIdWithResponse call
func ParseGetApiV1OperationsOperationIdResponse(rsp *http.Response) (*GetApiV1OperationsOperationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1OperationsOperationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Operation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePutApiV1OperationsOperationIdResponse parses an HTTP response from a PutApiV1OperationsOperationIdWithResponse call
func ParsePutApiV1OperationsOperationIdResponse(rsp *http.Response) (*PutApiV1OperationsOperationIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiV1OperationsOperationIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Id      *string   `json:"id,omitempty"`
			Members *[]Member `json:"members,omitempty"`
			Name    *string   `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetApiV1ShipsResponse parses an HTTP response from a GetApiV1ShipsWithResponse call
func ParseGetApiV1ShipsResponse(rsp *http.Response) (*GetApiV1ShipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiV1ShipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Ship
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetWsResponse parses an HTTP response from a GetWsWithResponse call
func ParseGetWsResponse(rsp *http.Response) (*GetWsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Authenticate
	// (GET /api/v1/auth)
	GetApiV1Auth(ctx echo.Context) error
	// Login
	// (GET /api/v1/login)
	GetApiV1Login(ctx echo.Context, params GetApiV1LoginParams) error
	// Get all members
	// (GET /api/v1/members)
	GetApiV1Members(ctx echo.Context) error
	// Get all members
	// (GET /api/v1/members/{member_id})
	GetApiV1MembersMemberId(ctx echo.Context, memberId string) error
	// Get all operations
	// (GET /api/v1/operations)
	GetApiV1Operations(ctx echo.Context) error
	// Create an operation
	// (POST /api/v1/operations)
	PostApiV1Operations(ctx echo.Context) error
	// Get an operation
	// (GET /api/v1/operations/{operation_id})
	GetApiV1OperationsOperationId(ctx echo.Context, operationId string) error
	// Update an operation
	// (PUT /api/v1/operations/{operation_id})
	PutApiV1OperationsOperationId(ctx echo.Context, operationId string) error
	// Get all ships
	// (GET /api/v1/ships)
	GetApiV1Ships(ctx echo.Context) error
	// WebSocket connection
	// (GET /ws)
	GetWs(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApiV1Auth converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1Auth(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1Auth(ctx)
	return err
}

// GetApiV1Login converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1Login(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiV1LoginParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1Login(ctx, params)
	return err
}

// GetApiV1Members converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1Members(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1Members(ctx)
	return err
}

// GetApiV1MembersMemberId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1MembersMemberId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "member_id" -------------
	var memberId string

	err = runtime.BindStyledParameterWithOptions("simple", "member_id", ctx.Param("member_id"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter member_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1MembersMemberId(ctx, memberId)
	return err
}

// GetApiV1Operations converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1Operations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1Operations(ctx)
	return err
}

// PostApiV1Operations converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiV1Operations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiV1Operations(ctx)
	return err
}

// GetApiV1OperationsOperationId converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1OperationsOperationId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "operation_id" -------------
	var operationId string

	err = runtime.BindStyledParameterWithOptions("simple", "operation_id", ctx.Param("operation_id"), &operationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter operation_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1OperationsOperationId(ctx, operationId)
	return err
}

// PutApiV1OperationsOperationId converts echo context to params.
func (w *ServerInterfaceWrapper) PutApiV1OperationsOperationId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "operation_id" -------------
	var operationId string

	err = runtime.BindStyledParameterWithOptions("simple", "operation_id", ctx.Param("operation_id"), &operationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter operation_id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutApiV1OperationsOperationId(ctx, operationId)
	return err
}

// GetApiV1Ships converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiV1Ships(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiV1Ships(ctx)
	return err
}

// GetWs converts echo context to params.
func (w *ServerInterfaceWrapper) GetWs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWs(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/auth", wrapper.GetApiV1Auth)
	router.GET(baseURL+"/api/v1/login", wrapper.GetApiV1Login)
	router.GET(baseURL+"/api/v1/members", wrapper.GetApiV1Members)
	router.GET(baseURL+"/api/v1/members/:member_id", wrapper.GetApiV1MembersMemberId)
	router.GET(baseURL+"/api/v1/operations", wrapper.GetApiV1Operations)
	router.POST(baseURL+"/api/v1/operations", wrapper.PostApiV1Operations)
	router.GET(baseURL+"/api/v1/operations/:operation_id", wrapper.GetApiV1OperationsOperationId)
	router.PUT(baseURL+"/api/v1/operations/:operation_id", wrapper.PutApiV1OperationsOperationId)
	router.GET(baseURL+"/api/v1/ships", wrapper.GetApiV1Ships)
	router.GET(baseURL+"/ws", wrapper.GetWs)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYXVPbOBT9KxrtPmZI0o99yFvaskx2tgvTwPLAMIxi38QqtiSka8Bl/N93JBs7jmXq",
	"AEmnO33CWLpf55x7JeeBBjJRUoBAQycP1AQRJMw9Hmot9RcwSgoD9oXSUoFGDm4Z7LJ7uGeJioFO6FQQ",
	"95bIIEi1hpAOKGbKLhnUXKxoPqAJGMNW0LSciVsW85BouEnBYNsur97IxVcI0Hr6DMkCdDszZgxfCQgb",
	"IZYsNlA5WUgZAxPWSyCFgAA3tqNOvbt5cxtli2D85q2vTsGSjSJPI/gABo9YAtpnoZm4blp8ZAoZF77N",
	"JuLqajMb+7IjHXOTsrBtYN++e/+H1wKZCK8WWQ9cfOwcK9AMuRRtgvqDmDiKCyOExD38rmFJJ/S3Ya3c",
	"YSnbYSmJOh+mNcv8dFQJ/mOXeinuRBreryRV7nyyrv7VtLPvlIYv73nEVTvnQMNdw+l4NKqMuUBYFcG3",
	"UFk7z7P5nBwKBK00N+CzeYTqNVg2QdoI/95TkBcg2wffZ/WpdtmlVKexihgpkuxBuAUCglRzzOY2WlHM",
	"ApgGPU0xqv/7U+qEIZ3Qv85P6aCY/q6z3WodK0JUNLeOuVhKa48cCx3KJGEiBE2mJzM6oLegjesQOj4Y",
	"HYxsPVKBYIrTCX17MDqwulEMI5fTkCk+vB0PWZnVCtD+CcEEmqui1ahNGQTygCEQjICkBvQBdY6LDp6F",
	"dEKPAKeK/zt2FQ6oLk8uF+fNaOQULwWCcCGYUrH1yKUYfjVFSxfUtGVgkGFqNihZS6ofKflgo655GgRg",
	"zDKNCau92bV8QN+Nxltl/JTUmie5J5MzYROQmn+DsCEfOrloCufiMr8cUJMmCdPZBgzO8pHRWK646KT0",
	"b7tKUDo6TWYQkm5C3WanGs0SQNdkF5seTyMgLiYJZAjWmQ1Pb1LQGX3sKWrXnDZuUm7vJ+V5VsO4SePl",
	"qwoJ5TUI39l3n317sYYKxJ10RvuTzubN7cdLt9JmoZt1Ua7NaK8svwBqDrdAGIm5QSKXhMUxKc26Ffq5",
	"9PtCsbzo3GhDM62KeKx7q9Y+Alyv3gfk8KF4uOJhvitQiz+zsM8AmH2y3u1MKbzbCaPL8NVIsIdPPRGq",
	"AvY6Fn4epitutu6a2rKb4+Pa+z4Qrb9JtgJ1DYNn4bpu7+67HhA/arDXG0YE3NUGbeROpHlt6P4XH2dt",
	"/ioXJHDYhsRUh2Wc/fiDchslPapD1NLo6NLhQ/XcdyobBQFf8qD2TRYZmX3q07bHa+tbDeg61vdn9HpF",
	"ex3TPWeJb3YYLlYxrNNl9fZuf3qr5S8kkqVMRfiM6SWaFajUI6UzFZbihHtukIvVkwMs3Y2GUpfFThTk",
	"GvaDDLNdiaeZT/5rnj8t6ILqn3me1y3jn+cm4mrrC5cz6h7ac+dzH9cs93PjVjesot5nXa5q0+FdN2SH",
	"Btki5iYijJzDYi6Da0BS/vbvnVNHgOddcHV+g/tc//okr0nz45Pn+X8BAAD//+Yj4TaIGgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
